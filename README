



##############################################################
# Orientational Order of Isotropic Particles Using SymBOPs # 
##############################################################


############
# Contents #
############

1. What is the purpose of this code?

2. Requirements

3. Using this code
    a. General use
    b. Input data file format
    c. Input parameters
    d. Manually input settings without using the input file "Settings.txt"  
    e. Using input file "Settings.txt"

4. Note about running the code on a PC


**Example files "simulated_sample.txt", "exp_sample_1.txt", "exp_sample_2.txt", and "Settings.txt" are included.




========================================
- 1. What is the purpose of this code? -
========================================

See these papers for more information:

- J. A. Logan, A. Michelson, A. Pattammattel, H. Yan, O. Gang, and A. V. Tkachenko, "Symmetry-specific characterization of bond orientation order in DNA-assembled nanoparticle lattices" 

- J. A. Logan,  S. Mushnoori,  M. Dutt, and A. V. Tkachenko, “Symmetry-specific orientational order parameters for complex structures,” (2021), arXiv:2110.13862 [cond-mat.soft]

- S. Mushnoori, J. A. Logan, A. V. Tkachenko, and M. Dutt, “Controlling morphology in hybrid isotropic/patchy particle assemblies,” (2021), arXiv:2110.14627 [cond-mat.soft]


To look for orientationally ordered domains with CUBIC SYMMETRY inside of a simulated sample 
made with isotropic particles, or an experimental sample made with anisotropic particles 
that does not have information on the individual particle orientations. 

The code uses the Symmetrized Bond-Order Parameters (SymBOPs) to look for
bond-orientational order in the neighborhood of each particle. SymBOPs are a modified version
of the traditional bond-order parameters (BOPs) that imbue the BOP with the symmetry of the
underlying lattice that we want to find. SymBOPs are applied to each bond, rather than each particle
(as traditional BOPs). In general the order parameter is an l-th rank tensors, but in 3D there
is a convenient 1-to-1 mapping between symmetric, traceless tensors of rank l to
spherical harmonics of degree l. This code takes advantage of the spherical harmonic form of the
order parameters.

This code is ONLY for isotropic particles, or effectively isotropic particles. That is,
you must have the approximate positions of the centers of the particles. If orientational information 
is known about anisotropic particles, such as the positions of the vertices of a polyhedron,
we have a formalism that is made to work with anisotropic particles, but it is not this code. Check the
papers listed above. 

This work can be extended to domains that have symmetry groups other than cubic, but it has not been
implemented here.




===================
= 2. Requirements =
===================

This was tested with the version listed below.

Python version:
Python 3.11.5

Required Packages:
SciPy 1.9.3
NumPy 1.23.4 
Matplotlib 3.6.2 
Pathlib 
LaTeX (required for plot labels)
Pandas 1.5.2
Seaborn 0.12.1

*Matplotlib's LaTeX support requires:
A LaTeX installation
dvipng
Ghostscript





======================
= 3. Using this code =
======================

    a. General use

        You must have a data input file in the format described in Section 3b below.

        There are two choices for running the code.

        A. Prepare a "Settings.txt" file as described in Section 3e below and define the input path 
		   settingsIN in "runSetup.py"
        OR
        B. Manually define each parameter (outlined in Section 3d below) in the file "runSetup.py"

		If B is chosen, a "Settings.txt" file will be made and stored in the directory IN, defined
		in "runSetup.py"

        For choice A. see Section 3e
        For choice B. see Section 3d


        If there is an input file "Settings.txt" in the settingsIN directory, the parameters listed 
		in "runSetup.py" will be ignored.

        **Regardless of choice, after all parameters are defined run the module "runSetup.py".

        **Before running: input data file should be in the directory IN, and "Settings.txt" (if applicable) 
		must be in the directory you define as the variable settingsIN.


		Tips for finding ordered domains:
		
		The most important parameters for finding domains are 
			- qlm_ring_width
			- half_angle
			- dom_min

		These are input at the beginning of the analysis and determine which bonds will be collected
		for potential domains for each given orientation. Changing these parameters could change the
		domains that are found.

		- The variable Sample.analysis_lval defines which l-value decides the orientation. Here we 
		exclusively use l=6 for the orientation. Calling maximizeQl4 in main.py is only necessary for
		l=6. We also call it for other l-values in order to make the heatmaps seen in our publication.




    b. Input data file format
		
		The input data should be a .txt file with similar format to XYZ file, BUT you may have particle IDs 
		in the first column.

		i. File Name
				The file name can be anything, but is input in either the Settings.txt file or in runSetup.py.

        ii. Line 0 and Line 1 of the data file
                The data should start on Line 2 of data file. The first two lines can be anything,
                but it's often a good idea to put the total # of particles on line 0.

		iii. Inputting Data
				Each line is tab delimited (though this can be changed in importSettings.py under General Settings)
				 
                Starting on *Line 2*, the data for one line will be input in the order:
                Particle ID    X    Y   Z
        
                Between each value there should be a tab (\t), unless changed in importSettings.py

   


	c. Input parameters

		List of input parameters and their descriptions:

		dataIN (str): 
				The path to where the "Settings.txt" file is located.

		dataFILE (str): 
				The name of the file that holds the data (particle IDs and positions, described in section 3b).

		dataOUT (str): 
				The path where the analysis results will be saved.
				Additional directories will be made at this path for each new iteration (orientation).

		l (comma delimited ints): 
				A list of spherical harmonic degrees (4,6,8,...). No brackets needed.

		half_angle (float in RADIANS): 
				The arclength of the sector used to choose bonds in potential domains in the qlm plots.
				Together with ql4_ring_width this defines the full sector of chosen bonds, 
				This controls how many particles are potentially in domains, and how close to ideal
				each particle's neighborhood should be.
	
		ql4_ring_width (float):
				The width of the section used to choose bonds in potential domains in the qlm plots.
				Together with half_angle this defines the full sector of chosen bonds, 
				This controls how many particles are potentially in domains, and how close to ideal
				each particle's neighborhood should be.
	
		Box (the next 3 lines of float,float OR 1 line None OR 1 line []): 
				The min and max limits in the x,y,z directions. Can be listed as None on one line. 
				The box will then be defined later.

		rmin_rmax (float,float):
				The min and max distance from a particle to look for neighboring particles.
				This defines a shell as the particle's neighborhood.
				These values can be defined from the nearest neighbor peak of the radial distribution.

		dom_min (int):
				The minimum size a domain can be.
				If a domain is found with size smaller than this value, it will not be kept and the
				particles and bonds will be put back into the sample for subsequent domains to be found.

		lattice_type (str):
				The type of cubic lattice to look for. This is only used for defining the characteristic
				radii for ideal bonds in the qlm plots.
				Currently only FCC is defined, but other cubic lattices can be added in "latticeBondTypes.py".




    d. Manually input settings without using the input file "Settings.txt"

		In "runSetup.py", below the header "Manually input settings" you can specify the values
		for all necessary variables. If this method is used, the settingsIN variable at the top
		will be ignored--DO NOT comment out the settingsIN variable.

		The code will make a "Settings.txt" file for you and it will be stored in the location
		specified by the variable IN.


    e. Using input file "Settings.txt"

		An input file with the name "Settings.txt" can be made for inputting the necessary parameters.
		The varaible "dataIN" in this file should be the path to where "Settings.txt" is located.
		If the settings file is not found in that location, or if it does not exist, the parameters
		will be read instead from the module "runSetup.py". Here, you can write the parameters manually 
		to be read in without a separate settings file. This will make a "Settings.txt" file for you,
		and store it in the directory IN that you put as one of the settings.


		## Format of the Settings.txt file ## 

		The input parameters can have any order as long as the 
		parameter name is listed and the parameter value is on the next line.
	
            ---------------------
Line 0      dataIN
Line 1      <input path (str)>
Line 2      dataFILE
.           <filename (str)>
.           dataOUT
.           <output path (str)>
            l
            <l1,l2,l3,... (int,int,int,...)> 
			half_angle
			<half of the angle to choose potential bonds in domains qlm complex plane plot (float in radians)>
			ql4_ring_width
			<width of ring to choose potiential bonds in domains (float)>
			Box
			<xmin,xmax (float,float)>
			<ymin,ymax (float,float)>
			<zmin,zmax (float,float)>
			rmin_rmax
			<rmin,rmax (float,float)>
			dom_min
			<miniminum domain size to look for (int)>
			lattice_type
Last Line	<cubic lattice type (str)>
            ---------------------
            EOF



			## Example Settings.txt file ##
 
            ---------------------
Line 0      dataIN
Line 1      /Users/jack/Desktop/
Line 2      dataFILE
.           particle_xyz.txt
.           dataOUT
.           /Users/jack/Desktop/
            l
            4,6
			half_angle
			0.4
			ql4_ring_width
			0.04
			Box
			-2000,2000
			-2000,2000
			-2000,2000
			rmin_rmax
			31.0,55.0
			dom_min
			1000
			lattice_type
Last Line	fcc
            ---------------------
            EOF









4. Note about running the code on a PC

    We use the package Pathlib to make sure all input and output paths work on Mac/Linux/PC systems.

    In order to write the input and output paths, regardless of what operating system you are using,
    use a forward slash (/)!

    For all systems an example path should look like this:
    "/Users/Desktop/folder/".

    Depending on your operating system Pathlib will correct the slashes itself, if necessary.













